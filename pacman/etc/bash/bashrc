# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# force export all environment variables
if [[ -f /etc/environment ]]
then
  set -a
  . /etc/environment
fi

export ZYPP_SINGLE_RPMTRANS=1
export ZYPP_MEDIANETWORK=1

set +a

# add multiple subpathes
for new_dir in '/bin' '/sbin' '/usr/bin' '/usr/sbin' '/usr/local/bin' '/usr/local/sbin' '/usr/games' '/usr/local/games'
do
  if [[ ":$PATH:" != *":$new_dir:"* ]]; then
    PATH="$PATH:$new_dir"
  fi
done
export PATH

# get platform uppercase variable
PLATFORM_UPPERCASE="$(uname)"
PLATFORM_UPPERCASE="${PLATFORM_UPPERCASE^^}"
if [[ $PLATFORM_UPPERCASE == *"MSYS_NT"* ]]; then
  PLATFORM_UPPERCASE=MSYS_NT
fi

if [[ "$PLATFORM_UPPERCASE" == MSYS_NT ]]
then
isadmin() {
    [[ "${GROUPS[@]}" =~ (^| )(114|544)( |$) ]];
}
link() {
    if [[ -z "$2" ]]; then
        fsutil reparsepoint query "$1" > /dev/null
    else
        link=`cygpath --windows "$(realpath "$2")"`
        target=`cygpath --windows "$(realpath "$1")"`
        if [[ -d "$1" ]]; then
            cmd <<< "mklink /D \"$link\" \"$target\""
        else
            cmd <<< "mklink \"$link\" \"$target\""
        fi
    fi
}
else
isadmin() {
    [[ "$EUID" -eq 0 ]]
}
link() {
    if [[ -z "$2" ]]; then
        [[ -h "$1" ]]
    else
        ln -s "$1" "$2"
    fi
}
fi

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=20000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# The command shopt -s expand_aliases in bash enables the expansion of
# aliases in shell scripts. By default, aliases are only
# expanded in interactive shells, not in scripts.
shopt -s expand_aliases

# make less more friendly for non-text input files, see lesspipe(1)
#[ -n "$(command -v lesspipe)"  ] && eval "$(SHELL=/bin/sh lesspipe)"

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt="${force_color_prompt:-yes}"

if [ -n "$force_color_prompt" ]; then
    if [ -n "$(command -v tput)" ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

# The following block is surrounded by two delimiters.
# These delimiters must not be modified. Thanks.
PROMPT_ALTERNATIVE="${PROMPT_ALTERNATIVE:-twoline}"
NEWLINE_BEFORE_PROMPT="{NEWLINE_BEFORE_PROMPT:-no}"

if [ "$color_prompt" = yes ]; then
    # override default virtualenv indicator in prompt
    VIRTUAL_ENV_DISABLE_PROMPT=1
    prompt_symbol=@
    if isadmin; then # Change prompt colors for root user
        prompt_color='\[\033[;94m\]'
        info_color='\[\033[1;31m\]'
        finish_char='#'
    else
        prompt_color='\[\033[;32m\]'
        info_color='\[\033[1;34m\]'
        finish_char='$'
    fi
    case "$PROMPT_ALTERNATIVE" in
        twoline)
            PS1=$prompt_color'┌──${VIRTUAL_ENV:+(\[\033[0;1m\]$(basename $VIRTUAL_ENV)'$prompt_color')}('$info_color'\u${prompt_symbol}\h \033[0;1m\]\D{%A %e %B %G %T}'$prompt_color')-[\[\033[0;1m\]\w'$prompt_color']\n'$prompt_color'└─'"${info_color}${finish_char}"'\[\033[0m\] ';;
        oneline)
            PS1='${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV)) }'$info_color'\u@\h\[\033[00m\]:'$prompt_color'\[\033[01m\]\w\[\033[00m\]'"${finish_char}"' ';;
        backtrack)
            PS1='${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV)) }\[\033[01;31m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]'"${finish_char}"' ';;
    esac
else
    PS1='\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*|Eterm|aterm|kterm|gnome*|alacritty)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

[ "$NEWLINE_BEFORE_PROMPT" = yes ] && PROMPT_COMMAND="PROMPT_COMMAND=echo"

# enable color support of ls, less and man, and also add handy aliases
if [ -n "$(command -v dircolors)"  ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    alias diff='diff --color=auto'
    alias ip='ip --color=auto'

    export LESS_TERMCAP_mb=$'\E[1;31m'     # begin blink
    export LESS_TERMCAP_md=$'\E[1;36m'     # begin bold
    export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
    export LESS_TERMCAP_so=$'\E[01;33m'    # begin reverse video
    export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
    export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
    export LESS_TERMCAP_ue=$'\E[0m'        # reset underline
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -l'
alias la='ls -A'
alias l='ls -CF'

# my custom functions
git_update(){
 git add --all
 git commit -m "${1:-update}"
 git push --force
}

git_rebase(){
 git add --all
 git commit --amend -m "${1:-update}"
 git push --force
}

# my custom aliases
[[ -n "$(command -v fastfetch)" ]] || alias fastfetch=neofetch
alias aboutos='fastfetch'
alias aboutoscolor='fastfetch | lolcat'
alias off='sudo poweroff'
alias reboot='sudo reboot'

#alias update='sudo dnf --refresh makecache'
#alias upgrade='sudo dnf --refresh update -y'

alias bashrc='source ~/.bashrc'
alias start-jupyter='source jupyterenv/bin/activate && jupyter notebook'
# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

